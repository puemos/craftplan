defmodule Craftplan.Repo.Migrations.AddNutritionalFact do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop constraint("accounts_tokens", "accounts_tokens_pkey")

    create table(:inventory_nutritional_facts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:inventory_nutritional_facts, [:name],
             name: "inventory_nutritional_facts_name_index"
           )

    create table(:inventory_material_nutritional_fact, primary_key: false) do
      add :amount, :decimal, null: false
      add :unit, :text, null: false

      add :material_id,
          references(:inventory_materials,
            column: :id,
            name: "inventory_material_nutritional_fact_material_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :nutritional_fact_id,
          references(:inventory_nutritional_facts,
            column: :id,
            name: "inventory_material_nutritional_fact_nutritional_fact_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    alter table(:accounts_tokens) do
      remove :id
    end

    execute("ALTER TABLE \"accounts_tokens\" ADD PRIMARY KEY (jti)")
  end

  def down do
    alter table(:accounts_tokens) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()")
    end

    drop constraint(
           :inventory_material_nutritional_fact,
           "inventory_material_nutritional_fact_material_id_fkey"
         )

    drop constraint(
           :inventory_material_nutritional_fact,
           "inventory_material_nutritional_fact_nutritional_fact_id_fkey"
         )

    drop table(:inventory_material_nutritional_fact)

    drop_if_exists unique_index(:inventory_nutritional_facts, [:name],
                     name: "inventory_nutritional_facts_name_index"
                   )

    drop table(:inventory_nutritional_facts)

    execute("ALTER TABLE \"accounts_tokens\" DROP constraint accounts_tokens_pkey")

    execute("ALTER TABLE \"accounts_tokens\" ADD PRIMARY KEY (id, jti)")
  end
end
