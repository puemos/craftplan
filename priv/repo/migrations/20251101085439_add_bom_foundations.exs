defmodule Craftplan.Repo.Migrations.AddBomFoundations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:settings) do
      add :labor_hourly_rate, :decimal, null: false, default: "0"
      add :labor_overhead_percent, :decimal, null: false, default: "0"
      add :retail_markup_mode, :text, null: false, default: "percent"
      add :retail_markup_value, :decimal, null: false, default: "0"
      add :wholesale_markup_mode, :text, null: false, default: "percent"
      add :wholesale_markup_value, :decimal, null: false, default: "0"
    end

    alter table(:orders_items) do
      add :batch_code, :text
      add :material_cost, :decimal, null: false, default: "0"
      add :labor_cost, :decimal, null: false, default: "0"
      add :overhead_cost, :decimal, null: false, default: "0"
      add :unit_cost, :decimal, null: false, default: "0"
      add :bom_id, :uuid
    end

    create table(:catalog_labor_steps, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :sequence, :bigint, null: false, default: 0
      add :duration_minutes, :decimal, null: false, default: "0"
      add :rate_override, :decimal
      add :notes, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bom_id, :uuid, null: false
    end

    create table(:catalog_boms, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:orders_items) do
      modify :bom_id,
             references(:catalog_boms,
               column: :id,
               name: "orders_items_bom_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:catalog_labor_steps) do
      modify :bom_id,
             references(:catalog_boms,
               column: :id,
               name: "catalog_labor_steps_bom_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:catalog_boms) do
      add :name, :text
      add :notes, :text
      add :status, :text, null: false, default: "draft"
      add :version, :bigint, null: false, default: 1
      add :published_at, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :product_id,
          references(:catalog_products,
            column: :id,
            name: "catalog_boms_product_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:catalog_boms, [:product_id, :version],
             name: "catalog_boms_product_version_index"
           )

    create table(:catalog_bom_components, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :component_type, :text, null: false, default: "material"
      add :quantity, :decimal, null: false, default: "0"
      add :position, :bigint, null: false, default: 0
      add :waste_percent, :decimal, null: false, default: "0"
      add :notes, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bom_id,
          references(:catalog_boms,
            column: :id,
            name: "catalog_bom_components_bom_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :material_id,
          references(:inventory_materials,
            column: :id,
            name: "catalog_bom_components_material_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :product_id,
          references(:catalog_products,
            column: :id,
            name: "catalog_bom_components_product_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:catalog_bom_components, "catalog_bom_components_bom_id_fkey")

    drop constraint(:catalog_bom_components, "catalog_bom_components_material_id_fkey")

    drop constraint(:catalog_bom_components, "catalog_bom_components_product_id_fkey")

    drop table(:catalog_bom_components)

    drop_if_exists unique_index(:catalog_boms, [:product_id, :version],
                     name: "catalog_boms_product_version_index"
                   )

    drop constraint(:catalog_boms, "catalog_boms_product_id_fkey")

    alter table(:catalog_boms) do
      remove :product_id
      remove :updated_at
      remove :inserted_at
      remove :published_at
      remove :version
      remove :status
      remove :notes
      remove :name
    end

    drop constraint(:catalog_labor_steps, "catalog_labor_steps_bom_id_fkey")

    alter table(:catalog_labor_steps) do
      modify :bom_id, :uuid
    end

    drop constraint(:orders_items, "orders_items_bom_id_fkey")

    alter table(:orders_items) do
      modify :bom_id, :uuid
    end

    drop table(:catalog_boms)

    drop table(:catalog_labor_steps)

    alter table(:orders_items) do
      remove :bom_id
      remove :unit_cost
      remove :overhead_cost
      remove :labor_cost
      remove :material_cost
      remove :batch_code
    end

    alter table(:settings) do
      remove :labor_overhead_percent
      remove :labor_hourly_rate
      remove :retail_markup_value
      remove :retail_markup_mode
      remove :wholesale_markup_value
      remove :wholesale_markup_mode
    end
  end
end
