defmodule Craftplan.Repo.Migrations.AddBomRollups do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:catalog_bom_rollups, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :material_cost, :decimal, null: false, default: "0"
      add :labor_cost, :decimal, null: false, default: "0"
      add :overhead_cost, :decimal, null: false, default: "0"
      add :unit_cost, :decimal, null: false, default: "0"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bom_id,
          references(:catalog_boms,
            column: :id,
            name: "catalog_bom_rollups_bom_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :product_id,
          references(:catalog_products,
            column: :id,
            name: "catalog_bom_rollups_product_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:catalog_bom_rollups, [:bom_id],
             name: "catalog_bom_rollups_unique_bom_index"
           )
  end

  def down do
    drop_if_exists unique_index(:catalog_bom_rollups, [:bom_id],
                     name: "catalog_bom_rollups_unique_bom_index"
                   )

    drop constraint(:catalog_bom_rollups, "catalog_bom_rollups_bom_id_fkey")

    drop constraint(:catalog_bom_rollups, "catalog_bom_rollups_product_id_fkey")

    drop table(:catalog_bom_rollups)
  end
end
